definitions:
  handler.RegisterRequest:
    properties:
      login:
        type: string
      nickname:
        type: string
      password:
        type: string
    required:
    - login
    - nickname
    - password
    type: object
  repository.Record:
    properties:
      emotion:
        type: string
      id:
        type: integer
      record_date:
        type: string
      summary:
        type: string
      user_id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /records/{recordID}:
    get:
      description: Returns emotion and summary for a specific record.
      parameters:
      - description: Record ID
        in: path
        name: recordID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.Record'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get analysis result for a record.
      tags:
      - records
  /records/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a voice file, sends it to the ML service for analysis,
        and saves the record.
      parameters:
      - description: User ID
        in: formData
        name: userID
        required: true
        type: integer
      - description: Voice file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload  a new voice record
      tags:
      - records
  /users/{userID}/records:
    get:
      consumes:
      - application/json
      description: Returns a list of all diary records for a specific user.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repository.Record'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user records
      tags:
      - records
  /users/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
swagger: "2.0"
